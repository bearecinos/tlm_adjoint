For a list of authors see AUTHORS in the tlm_adjoint root directory.

# tlm_adjoint is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# tlm_adjoint is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with tlm_adjoint.  If not, see <https://www.gnu.org/licenses/>.

===============================================================================

tlm_adjoint is described in

  J. R. Maddison, D. N. Goldberg, and B. D. Goddard, SIAM Journal on
  Scientific Computing, 41(5), pp. C417--C445, 2019

tlm_adjoint was developed out of a custom extension to dolfin-adjoint, and
previously made use of code derived from dolfin-adjoint, particularly in an
earlier version of the EquationSolver.adjoint_derivative_action method in
tlm_adjoint/_code_generator/equations.py.

Early development work leading to tlm_adjoint was conducted as part of a U.K.
Natural Environment Research Council funded project (NE/L005166/1). Further
development has been conducted as part of a U.K. Engineering and Physical
Sciences Research Council funded project (EP/R021600/1) and a Natural
Environment Research Council funded project (NE/T001607/1).

===============================================================================

The file tlm_adjoint/fenics/backend.py previously included a 'vector' function,
which followed Function::init_vector in dolfin/function/Function.cpp, DOLFIN
2017.2.0.post0. Code first added 2018-08-03, removed 2018-09-04. Copyright
notice from dolfin/function/Function.cpp, DOLFIN 2017.2.0.post0, follows.

// Copyright (C) 2003-2012 Anders Logg
//
// This file is part of DOLFIN.
//
// DOLFIN is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// DOLFIN is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with DOLFIN. If not, see <http://www.gnu.org/licenses/>.
//
// Modified by Garth N. Wells 2005-2010
// Modified by Martin Sandve Alnes 2008-2014
// Modified by Andre Massing 2009

===============================================================================

The 'eigendecompose' function in tlm_adjoint/eigendecomposition.py was
originally developed by loosely following the slepc4py 3.6.0 demo demo/ex3.py.
slepc4py 3.6.0 license information follows.

=========================
LICENSE: SLEPc for Python
=========================

:Author:  Lisandro Dalcin
:Contact: dalcinl@gmail.com


Copyright (c) 2015, Lisandro Dalcin.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

* Redistributions of source code must retain the above copyright
  notice, this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

===============================================================================

The FixedPointSolver class in tlm_adjoint/equations.py derives tangent-linear
and adjoint information using the approach described in [1, 2].

[1] Jean Charles Gilbert, 'Automatic differentiation and iterative processes',
    Optimization Methods and Software, 1(1), pp. 13--21, 1992,
    doi: 10.1080/10556789208805503
[2] Bruce Christianson, 'Reverse accumulation and attractive fixed points',
    Optimization Methods and Software, 3(4), pp. 311--326, 1994,
    doi: 10.1080/10556789408805572

===============================================================================

The MultistageCheckpointSchedule class in
tlm_adjoint/checkpoint_schedules/binomial.py implements the binomial
checkpointing strategy described in [3]. A memory/disk storage distribution is
determined by an initial run of the checkpoint schedule, leading to a
distribution equivalent to that in [4].

[3]  Andreas Griewank and Andrea Walther, 'Algorithm 799: revolve: an
     implementation of checkpointing for the reverse or adjoint mode of
     computational differentiation', ACM Transactions on Mathematical Software,
     26(1), pp. 19--45, 2000, doi: 10.1145/347837.347846
[4]  Philipp Stumm and Andrea Walther, 'MultiStage approaches for optimal
     offline checkpointing', SIAM Journal on Scientific Computing, 31(3), pp.
     1946--1967, 2009, doi: 10.1137/080718036

===============================================================================

The TwoLevelCheckpointSchedule class in
tlm_adjoint/checkpoint_schedules/binomial.py implements the two-level mixed
periodic/binomial checkpointing approach described in [5] and the supporting
information for [6].

[5]  Gavin J. Pringle, Daniel C. Jones, Sudipta Goswami, Sri Hari Krishna
     Narayanan, and Daniel Goldberg, "Providing the ARCHER community with
     adjoint modelling tools for high-performance oceanographic and cryospheric
     computation", version 1.1, EPCC, 2016
[6]  D. N. Goldberg, T. A. Smith, S. H. K. Narayanan, P. Heimbach, and
     M. Morlighem, "Bathymetric influences on Antarctic ice-shelf melt rates",
     Journal of Geophysical Research: Oceans, 125(11), e2020JC016370, 2020
